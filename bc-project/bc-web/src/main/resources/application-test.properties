server.port= 8071

# mysql以及druid数据源配置
spring.datasource.url= jdbc:mysql://172.172.172.249:3306/saasdb?characterEncoding=utf8&useSSL=true
spring.datasource.username= saas
spring.datasource.password= Ikangsaas0410
spring.datasource.initialSize= 1
spring.datasource.minIdle= 3
spring.datasource.maxActive= 20
# 配置获取连接等待超时的时间
spring.datasource.maxWait= 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis= 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis= 30000
spring.datasource.validationQuery= select 'x'
spring.datasource.testWhileIdle= true
spring.datasource.testOnBorrow= false
spring.datasource.testOnReturn= false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements= true
spring.datasource.maxPoolPreparedStatementPerConnectionSize= 20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters= stat,wall,slf4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties= druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#useGlobalDataSourceStat: true

#dubbo
#dubbo.registry.address=172.172.172.47:2181
#dubbo.registry.name=organization-dubbo-service
#dubbo.protocol.port=20888
#zk.zkConnectCas=172.172.172.47:2181

#shiro
#SYSTEM_NAME=PG
#IKANG-CASServer=http://test.cas.ikang.com/cas
#IKANG-CASService=http://172.172.172.3:8070
#failureUrl=http://172.172.172.3:8070/403.html
#successUrl=http://172.172.172.3:8070
#SAMLtolerance=1800000000

#header
#loadHome=http://test.cas.ikang.com/cas
#loadChange=http://test.cas.ikang.com/cas/change
#loadPROJECT=http://172.172.172.3:8070

# spring-session-redis
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=192.168.98.75
#spring.redis.host=172.172.172.80
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=3000

spring.application.name=base
eureka.client.serviceUrl.defaultZone= http://172.172.172.27:9992/eureka/
instance.prefer-ip-address= true
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds= 5000

eureka.instance.preferIpAddress=true
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${server.port}
